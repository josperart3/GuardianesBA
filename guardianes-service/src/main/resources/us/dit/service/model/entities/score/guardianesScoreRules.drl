package us.dit.service.model.entities.score

import java.lang.Math
import java.time.temporal.ChronoUnit

import us.dit.service.model.entities.Doctor
import us.dit.service.model.entities.ShiftAssignment
import us.dit.service.model.entities.DayConfiguration
import us.dit.service.model.entities.AllowedShift

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder

global HardSoftScoreHolder scoreHolder

dialect "mvel"

// ---------------- REGLAS ----------------

rule "Maximun number of shifts in the afternoon for a doctor"
when
    $config : GuardianesConstraintConfiguration()
    $doctor : Doctor()
    $c : Number() from accumulate(
            ShiftAssignment(doctor == $doctor, shift.shiftType == "TARDE"),
            count()
        )
    eval($c.intValue() > $config.getMaxShift())
then
    int over = $c.intValue() - $config.getMaxShift();
    scoreHolder.addHardConstraintMatch(kcontext, - over * $config.getMaxShifts().getHardScore());
end

rule "Minimun number of shifts in the afternoon for a doctor"
when
    $config : GuardianesConstraintConfiguration()
    $doctor : Doctor()
    $c : Number() from accumulate(
            ShiftAssignment(doctor == $doctor, shift.shiftType == "TARDE"),
            count()
        )
    eval($c.intValue() < $config.getMinShift())
then
    int missing = $config.getMinShift() - $c.intValue();
    scoreHolder.addHardConstraintMatch(kcontext, - missing * $config.getMinShifts().getHardScore());
end

// ciclo
rule "A doctor does night guards"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(
        doctor != null,
        shift.shiftType == "GUARDIA",
        doctor.shiftConfiguration.doesCycleShifts == false
    )
then
    scoreHolder.penalize(kcontext, $config.getDoesCycleShifts().getHardScore());
end

rule "A doctor does afternoon shifts when they do night guards"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(
        $d  : doctor != null,
        $dc : dayConfiguration != null,
        shift.shiftType == "TARDE",
        $d.shiftConfiguration.hasShiftsOnlyWhenCycleShifts == true
    )
    not( Doctor( id == $d.id ) from $dc.mandatoryShifts )
then
    scoreHolder.penalize(kcontext, $config.getHasShiftsOnlyWhenCycleShifts().getHardScore());
end

// preferencias/indisponibilidades
rule "Unavailable afternoon shifts for a doctor during a week"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( $d : doctor != null, $s : shift != null )
    AllowedShift( id == $s.id ) from $d.shiftConfiguration.unavailableShifts
then
    scoreHolder.penalize(kcontext, $config.getUnavailableShifts().getHardScore());
end

rule "Mandatory afternoon shifts for a doctor during a week"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( $d : doctor != null, $s : shift != null )
    AllowedShift( id == $s.id ) from $d.shiftConfiguration.mandatoryShifts
then
    scoreHolder.addHardConstraintMatch(kcontext, - $config.getMandatoryShifts().getHardScore());
end

// condiciones del dÃ­a
rule "Working day"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(dayConfiguration.isWorkingDay == false)
then
    scoreHolder.penalize(kcontext, $config.getIsWorkingDay().getHardScore());
end

rule "Number of afternoon shifts that should be in a day of the week"
when
    $config : GuardianesConstraintConfiguration()
    $day : DayConfiguration($expected : numShifts != null)
    $count: Number() from accumulate(
        ShiftAssignment(shift.shiftType == "TARDE", dayConfiguration == $day),
        count()
    )
    eval($expected.intValue() != $count.intValue())
then
    int delta = Math.abs($expected.intValue() - $count.intValue());
    scoreHolder.addHardConstraintMatch(kcontext, - delta * $config.getNumShifts().getHardScore());
end

rule "Number of consultations in a day of the week"
when
    $config : GuardianesConstraintConfiguration()
    $d : DayConfiguration($numConsultations : numConsultations != null)
    $c : Number() from accumulate(
        ShiftAssignment(consultation == true, dayConfiguration == $d),
        count()
    )
    eval($numConsultations != $c.intValue())
then
    scoreHolder.penalize(kcontext, $config.getNumConsultationsInDay().getHardScore());
end

// otras restricciones
rule "Holidays for a doctor"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(
        $doc  : doctor != null,
        $date : dayConfiguration.date
    )
    eval( $doc.getAbsence() != null && $doc.getAbsence().isAbsentOn($date) )
then
    scoreHolder.penalize(kcontext, $config.getHolidays().getHardScore());
end

rule "Minimum number of days between night guards for a doctor"
when
    $config : GuardianesConstraintConfiguration()
    $a : ShiftAssignment(
        $doctor : doctor != null,
        shift.shiftType == "GUARDIA",
        $dateA : dayConfiguration.date, $idA : id
    )
    ShiftAssignment(
        doctor == $doctor,
        shift.shiftType == "GUARDIA",
        $dateB : dayConfiguration.date, id > $idA,
        eval(Math.abs(ChronoUnit.DAYS.between($dateA, $dateB)) < 3)
    )
then
    scoreHolder.penalize(kcontext, $config.getMinDaysBetweenCycleShifts().getHardScore());
end

rule "Skill required for a doctor to work in this station"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(
        shift.requiresSkill == true,
        (doctor == null || !doctor.hasRequiredSkill())
    )
then
    scoreHolder.penalize(kcontext, $config.getSkillRequired().getHardScore());
end

rule "Number of consultations a doctor do"
when
    $config : GuardianesConstraintConfiguration()
    $doctor : Doctor($conf : shiftConfiguration != null, $expected : shiftConfiguration.numConsultations)
    Number(intValue != $expected) from accumulate(
        ShiftAssignment(consultation == true, doctor == $doctor),
        count()
    )
then
    scoreHolder.penalize(kcontext, $config.getNum_consultations().getSoftScore());
end

rule "Unwanted afternoon shifts for a doctor during a week"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( $d : doctor != null, $s : shift != null )
    AllowedShift( id == $s.id ) from $d.shiftConfiguration.unwantedShifts
then
    scoreHolder.penalize(kcontext, $config.getUnwantedShifts().getHardScore());
end

rule "Wanted afternoon shifts for a doctor during a week"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( $d : doctor != null, $s : shift != null )
    AllowedShift( id == $s.id ) from $d.shiftConfiguration.wantedShifts
then
    scoreHolder.reward(kcontext, $config.getWantedShifts().getSoftScore());
end

rule "Wanted consultations for a doctor during a week"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment(
        consultation == true,
        $d : doctor != null,
        $s : shift != null
    )
    AllowedShift( id == $s.id ) from $d.shiftConfiguration.wantedConsultations
then
    scoreHolder.reward(kcontext, $config.getWantedConsultations().getSoftScore());
end

rule "Avoid consecutive TARDE for same doctor (soft)"
when
    $d : Doctor()
    $a : ShiftAssignment(doctor == $d, shift.shiftType == "TARDE", $da : dayConfiguration.date)
    ShiftAssignment(doctor == $d, shift.shiftType == "TARDE",
        $db : dayConfiguration.date,
        this != $a,
        eval(Math.abs(ChronoUnit.DAYS.between($da, $db)) == 1))
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

rule "One assignment per day per doctor"
when
    $config : GuardianesConstraintConfiguration()
    $d : Doctor()
    $day : DayConfiguration()
    Number(intValue > 1) from accumulate(
        ShiftAssignment(doctor == $d, dayConfiguration == $day),
        count()
    )
then
    scoreHolder.addHardConstraintMatch(kcontext, - $config.getOnePerDay().getHardScore()); 
end

rule "Every shift must have a doctor"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( doctor == null )
then
    scoreHolder.addHardConstraintMatch(kcontext, - $config.getEveryShiftAssigned().getHardScore());
end

// BLANDA: preferir asignado vs null
rule "Prefer assigned doctor"
when
    $config : GuardianesConstraintConfiguration()
    ShiftAssignment( doctor != null )
then
    scoreHolder.addSoftConstraintMatch(kcontext, $config.getAssignedDoctor().getSoftScore());
end